package best.lettuce.modules.impl.exploit;

import best.lettuce.event.base.EventListener;
import best.lettuce.event.impl.player.EventMotion;
import best.lettuce.event.impl.player.EventStrafe;
import best.lettuce.modules.Category;
import best.lettuce.modules.Module;
import best.lettuce.modules.property.impl.ModeProperty;
import best.lettuce.modules.property.impl.NumberProperty;
import best.lettuce.utils.math.TickTimer;
import best.lettuce.utils.packet.PacketUtils;
import best.lettuce.utils.player.DamageUtils;
import net.minecraft.network.play.client.C09PacketHeldItemChange;

public class SelfDamage extends Module {
    public SelfDamage() {
        super("Self Damage", Category.EXPLOIT, "Attempts to damage yourself");
        addProperties(mode, packets);
    }

    public final ModeProperty mode = new ModeProperty("Mode", "C04", "C04", "C06", "Bow");
    public final NumberProperty packets = new NumberProperty("Packets", 3, 1, 20, 1, () -> !mode.is("Bow"));

    TickTimer timer = new TickTimer();
    int currentSlot = -1;

    @Override
    public void onEnable() {
        currentSlot = mc.thePlayer.inventory.currentItem;

        switch (mode.getMode()) {
            case "C04": DamageUtils.positionalDamage(DamageUtils.PositionType.CO4, true, true, packets.getValue().intValue()); break;
            case "C06": DamageUtils.positionalDamage(DamageUtils.PositionType.CO6, true, true, packets.getValue().intValue()); break;
        }
    }

    @Override
    public void onDisable() {
        if (mode.is("Bow")) {
            PacketUtils.sendPacketNoEvent(new C09PacketHeldItemChange(currentSlot));
            timer.reset();
        }
    }

    public final EventListener<EventStrafe> onStrafe = e -> {
        if (mc.thePlayer == null) return;

        if (mode.is("Bow") && canDamage()) e.cancel();
    };

    public final EventListener<EventMotion> onMotion = e -> {
        if (!canDamage()) {
            toggle(ToggleType.AUTO);
            return;
        }

        switch (mode.getMode()) {
            case "Bow": {
                if (e.isPre()) {
                    DamageUtils.bowDamage(e, timer.tick);
                    timer.update();
                }
                break;
            }
        }
    };

    public boolean canDamage() {
        return mc.thePlayer != null && mc.thePlayer.ticksExisted >= 5 && mc.thePlayer.hurtTime <= 0 && mc.thePlayer.onGround;
    }
}
