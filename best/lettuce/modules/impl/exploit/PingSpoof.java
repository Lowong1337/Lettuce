package best.lettuce.modules.impl.exploit;

import best.lettuce.event.base.EventListener;
import best.lettuce.event.impl.network.EventPacketSend;
import best.lettuce.event.impl.player.EventMotion;
import best.lettuce.modules.Category;
import best.lettuce.modules.Module;
import best.lettuce.modules.property.impl.NumberProperty;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C16PacketClientStatus;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class PingSpoof extends Module {
    public PingSpoof() {
        super("Ping Spoof", Category.EXPLOIT, "");
        addProperties(ping);
    }

    public final NumberProperty ping = new NumberProperty("Ping", 500, 0, 5000, 100);

    public final HashMap<Packet, Long> packets = new HashMap<>();

    public final EventListener<EventPacketSend> onPacketSend = e -> {
        if((e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof C16PacketClientStatus) && packets.containsValue(e.getPacket())) {
            e.setCancelled(true);

            synchronized (packets) {
                packets.put(e.getPacket(), System.currentTimeMillis() + ping.getValue().longValue());
            }
        }
    };

    public final EventListener<EventMotion> onMotion = e -> {
        List<Packet> filtered = new ArrayList<>();

        synchronized (packets) {
            filtered = packets.entrySet().stream().filter(entry -> entry.getValue() <= System.currentTimeMillis()).map(Map.Entry::getKey).collect(Collectors.toList());
        }

        filtered.forEach(packet -> {
            mc.thePlayer.sendQueue.getNetworkManager().sendPacket(packet);
            packets.remove(packet);
        });
    };
}
