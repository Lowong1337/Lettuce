package best.lettuce.modules.impl.exploit;

import best.lettuce.Lettuce;
import best.lettuce.event.base.EventListener;
import best.lettuce.event.impl.game.EventTick;
import best.lettuce.event.impl.game.EventWorld;
import best.lettuce.event.impl.network.EventPacketReceive;
import best.lettuce.event.impl.network.EventPacketSend;
import best.lettuce.modules.Category;
import best.lettuce.modules.Module;
import best.lettuce.modules.property.impl.ModeProperty;
import best.lettuce.utils.math.MathUtils;
import best.lettuce.utils.packet.PacketUtils;
import best.lettuce.utils.server.ServerUtils;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.potion.Potion;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

import java.util.ArrayList;

public class Disabler extends Module {
    private final ArrayList<Packet<?>> packets = new ArrayList<>();
    private int ticks;

    public Disabler(){
        super("Disabler", Category.EXPLOIT, "Disables some anticheats.");
        addProperties(mode);
    }

    public final ModeProperty mode = new ModeProperty("Mode", "Verus Combat", "Verus Combat", "Test", "Test 2", "Vulcant", "Watchdog");

    public final EventListener<EventTick> onTick = e -> {
        this.setSuffix(mode.getMode());
    };
    public final EventListener<EventPacketSend> onPacket = event -> {
        if(mc.thePlayer != null && !(mc.currentScreen instanceof GuiDownloadTerrain)) {
            switch (mode.getMode()) {
                case "Verus combat" -> {
                    if (mc.thePlayer.ticksExisted <= 20 || mc.thePlayer.capabilities.allowFlying || event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C0BPacketEntityAction) {
                        event.setCancelled(true);
                    }
                    if (event.getPacket() instanceof C03PacketPlayer)
                        PacketUtils.sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1.0, mc.thePlayer.posZ), EnumFacing.UP));
                }
                case "Vulcant" -> {
                    if (event.getPacket() instanceof C17PacketCustomPayload || event.getPacket() instanceof C0BPacketEntityAction)
                        event.setCancelled(true);
                    PacketUtils.sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, new BlockPos(mc.thePlayer), EnumFacing.UP));
                    if (mc.thePlayer.ticksExisted % 4 == 0)
                        PacketUtils.sendPacket(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, new BlockPos(mc.thePlayer), EnumFacing.UP));
                }
                case "Test" -> {
                    if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C0BPacketEntityAction || event.getPacket() instanceof C00PacketKeepAlive) {
                        event.setCancelled(true);
                        Lettuce.text("cancelled");
                    }
                    if (event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition c04) {
                        if(mc.thePlayer.ticksExisted % 4 == 0)
                            c04.setMoving(false);
                        c04.setOnGround(true);
                        event.setCancelled(true);
                        PacketUtils.sendPacketNoEvent(new C03PacketPlayer(true));
                    }
                }
                case "Watchdog" -> {
                    if (!ServerUtils.isOnHypixel()) return;
                    if (packets.contains(event.getPacket()))
                        return;
                    if (event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        event.setCancelled(true);
                        packets.add(event.getPacket());
                    }
                    if (event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        ticks++;
                        if (ticks % 16 == 0) {
                            for (Packet<?> packet : packets)
                                mc.thePlayer.sendQueue.addToSendQueue(packet);
                            packets.clear();
                            mc.thePlayer.sendQueue.addToSendQueue(new C11PacketEnchantItem((int) MathUtils.getRandomInRange(Integer.MIN_VALUE, Integer.MAX_VALUE),
                                    (int) MathUtils.getRandomInRange(Integer.MIN_VALUE, Integer.MAX_VALUE)));
                        }
                    }
                }
                case "Test 2" -> {
                    if(mc.thePlayer.ticksExisted % 15 == 0){
                        if(event.getPacket() instanceof C0BPacketEntityAction || event.getPacket() instanceof C0FPacketConfirmTransaction){
                            event.setCancelled(true);
                            Lettuce.text("Sex");
                        }
                    }
                    if(mc.thePlayer.ticksExisted % 10 == 0 && (event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition || event.getPacket() instanceof C03PacketPlayer)){
                        event.setCancelled(true);
                        Lettuce.text("Cancelled");
                    }
                }
            }
        }
    };

    public final EventListener<EventPacketReceive> onPacketRecieve = event -> {
        if(mc.thePlayer != null && !(mc.currentScreen instanceof GuiDownloadTerrain)) {
            switch (mode.getMode()) {
                case "Test" -> {
                    if (event.getPacket() instanceof S08PacketPlayerPosLook s08) {
                        if(mc.thePlayer.ticksExisted % 5 != 0)
                            return;
                        event.setCancelled(true);
                        mc.thePlayer.setPosition(s08.getX(), s08.getY(), s08.getZ());
                        PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
                    }
                    if(event.getPacket() instanceof S32PacketConfirmTransaction && mc.thePlayer.ticksExisted <= 20){
                        event.setCancelled(true);
                    }
                }
            }
        }
    };

    public final EventListener<EventWorld> eventWorldChangeListener = e -> ticks = 0;
}
